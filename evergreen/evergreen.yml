#################################################
# Evergreen Template for MongoDB EF Core Provider
#################################################

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
exec_timeout_secs: 900

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la
        df -h

functions:
  fetch-source:
    # Executes git clone and applies the submitted patch, if any
    - command: git.get_project
      params:
        directory: mongo-efcore-provider
    # Applies the subitted patch, if any
    # Deprecated. Should be removed. But still needed for certain agents (ZAP)
    - command: git.apply_patch
    # Make an evergreen exapanstion file with dynamic values
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongo-efcore-provider
        script: |
          # Get the current unique version of this checkout
          if [ "${is_patch}" = "true" ]; then
            CURRENT_VERSION=$(git describe)-patch-${version_id}
          else
            CURRENT_VERSION=latest
          fi

          if [ "${BUILD_TARGET}" = "release" ]; then
            PACKAGE_VERSION=$(BUILD_TARGET="${BUILD_TARGET}" bash ./evergreen/generate-version.sh)
          fi

          export DRIVERS_TOOLS="$(pwd)/../drivers-tools"
          export DOTNET_SDK_PATH="$(pwd)/../.dotnet"

          if [ "Windows_NT" = "$OS" ]; then # Magic variable in cygwin
            # Python has cygwin path problems on Windows. Detect prospective mongo-orchestration home directory
            export DRIVERS_TOOLS=$(cygpath -m $DRIVERS_TOOLS)
          else
            # non windows OSs don't have dotnet in the PATH
            export PATH=$PATH:/usr/share/dotnet
          fi

          export MONGO_ORCHESTRATION_HOME="$DRIVERS_TOOLS/.evergreen/orchestration"
          export MONGODB_BINARIES="$DRIVERS_TOOLS/mongodb/bin"
          export PROJECT_DIRECTORY="$(pwd)"

          cat <<EOT > expansion.yml
          CURRENT_VERSION: "$CURRENT_VERSION"
          DRIVERS_TOOLS: "$DRIVERS_TOOLS"
          MONGO_ORCHESTRATION_HOME: "$MONGO_ORCHESTRATION_HOME"
          MONGODB_BINARIES: "$MONGODB_BINARIES"
          PROJECT_DIRECTORY: "$PROJECT_DIRECTORY"
          PACKAGE_VERSION: "$PACKAGE_VERSION"
          DOTNET_SDK_PATH: "$DOTNET_SDK_PATH"
          PREPARE_SHELL: |
            set -o errexit
            set -o xtrace
            export DRIVERS_TOOLS="$DRIVERS_TOOLS"
            export MONGO_ORCHESTRATION_HOME="$MONGO_ORCHESTRATION_HOME"
            export MONGODB_BINARIES="$MONGODB_BINARIES"
            export PROJECT_DIRECTORY="$PROJECT_DIRECTORY"
            export PACKAGE_VERSION="$PACKAGE_VERSION"
            export DOTNET_SDK_PATH="$DOTNET_SDK_PATH"
            export TMPDIR="$MONGO_ORCHESTRATION_HOME/db"
            export PATH="$DOTNET_SDK_PATH:$MONGODB_BINARIES:$PATH"
            export PROJECT="${project}"
          EOT
          # See what we've done
          cat expansion.yml

    # Load the expansion file to make an evergreen variable with the current unique version
    - command: expansions.update
      params:
        file: mongo-efcore-provider/expansion.yml

  install-dependencies:
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          OS=${OS} \
            ${PROJECT_DIRECTORY}/evergreen/install-dependencies.sh

  prepare-resources:
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          rm -rf $DRIVERS_TOOLS
          if [ "${project}" = "drivers-tools" ]; then
            # If this was a patch build, doing a fresh clone would not actually test the patch
            cp -R ${PROJECT_DIRECTORY}/ $DRIVERS_TOOLS
          else
            git clone https://github.com/mongodb-labs/drivers-evergreen-tools.git $DRIVERS_TOOLS
          fi
          echo "{ \"releases\": { \"default\": \"$MONGODB_BINARIES\" }}" > $MONGO_ORCHESTRATION_HOME/orchestration.config

  upload-mo-artifacts:
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          find $MONGO_ORCHESTRATION_HOME -name \*.log | xargs tar czf mongodb-logs.tar.gz
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongodb-logs.tar.gz
        remote_file: ${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-mongodb-logs.tar.gz
        bucket: ${aws_upload_bucket}
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "mongodb-logs.tar.gz"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: drivers-tools/.evergreen/orchestration/server.log
        remote_file: ${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-orchestration.log
        bucket: ${aws_upload_bucket}
        permissions: public-read
        content_type: ${content_type|text/plain}
        display_name: "orchestration.log"

  upload-test-results:
    - command: attach.xunit_results
      params:
        file: ./mongo-efcore-provider/artifacts/test-results/TEST*.xml

  bootstrap-mongo-orchestration:
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          MONGODB_VERSION=${VERSION} \
          STORAGE_ENGINE=${STORAGE_ENGINE} \
          ORCHESTRATION_FILE=${ORCHESTRATION_FILE} \
            bash ${DRIVERS_TOOLS}/.evergreen/run-orchestration.sh
    # run-orchestration generates expansion file with the MONGODB_URI for the cluster
    - command: expansions.update
      params:
        file: mo-expansion.yml

  run-tests:
    - command: shell.exec
      type: test
      params:
        working_dir: mongo-efcore-provider
        script: |
          ${PREPARE_SHELL}
          DRIVER_VERSION=${DRIVER_VERSION} \
          OS=${OS} \
          MONGODB_URI="${MONGODB_URI}" \
          TARGET_RUNTIME="${TARGET_RUNTIME}" \
            ./evergreen/run-tests.sh

  cleanup:
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          cd "$MONGO_ORCHESTRATION_HOME"
          # source the mongo-orchestration virtualenv if it exists
          if [ -f venv/bin/activate ]; then
            . venv/bin/activate
          elif [ -f venv/Scripts/activate ]; then
            . venv/Scripts/activate
          fi
          mongo-orchestration stop
          cd -
          rm -rf $DRIVERS_TOOLS || true

  fix-absolute-paths:
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          for filename in $(find ${DRIVERS_TOOLS} -name \*.json); do
            perl -p -i -e "s|ABSOLUTE_PATH_REPLACEMENT_TOKEN|${DRIVERS_TOOLS}|g" $filename
          done

  windows-fix:
    - command: shell.exec
      params:
        script: |
          if [ "Windows_NT" = "$OS" ]; then
            ${PREPARE_SHELL}
            for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/evergreen -name \*.sh); do
              cat $i | tr -d '\r' > $i.new
              mv $i.new $i
            done
            # Copy client certificate because symlinks do not work on Windows.
            cp ${DRIVERS_TOOLS}/.evergreen/x509gen/client.pem ${MONGO_ORCHESTRATION_HOME}/lib/client.pem
          fi

  make-files-executable:
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/evergreen -name \*.sh); do
            chmod +x $i
          done

  pack-packages:
    - command: shell.exec
      params:
        working_dir: mongo-efcore-provider
        script: |
          ${PREPARE_SHELL}
          . ./evergreen/pack-packages.sh

  packages-smoke-tests:
    - command: shell.exec
      params:
        working_dir: mongo-efcore-provider
        script: |
          ${PREPARE_SHELL}
          DRIVER_VERSION=${DRIVER_VERSION} \
          MONGODB_URI="${MONGODB_URI}" \
          TARGET_RUNTIME="${TARGET_RUNTIME}" \
          PACKAGE_VERSION="${PACKAGE_VERSION}" \
          . ./evergreen/run-smoke-tests.sh

  push-packages:
    - command: shell.exec
      params:
        working_dir: mongo-efcore-provider
        env:
          PACKAGES_SOURCE: ${PACKAGES_SOURCE}
          PACKAGES_SOURCE_KEY: ${PACKAGES_SOURCE_KEY}
        script: |
          ${PREPARE_SHELL}
          . ./evergreen/push-packages.sh

  upload-package:
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: ./mongo-efcore-provider/artifacts/nuget/${PACKAGE_ID}.${PACKAGE_VERSION}.nupkg
        remote_file: ${revision}/${PACKAGE_ID}.${PACKAGE_VERSION}.nupkg
        bucket: ${aws_upload_bucket}
        permissions: public-read
        content_type: ${content_type|application/octet-stream}
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: ./mongo-efcore-provider/artifacts/nuget/${PACKAGE_ID}.${PACKAGE_VERSION}.snupkg
        remote_file: ${revision}/${PACKAGE_ID}.${PACKAGE_VERSION}.snupkg
        bucket: ${aws_upload_bucket}
        permissions: public-read
        content_type: ${content_type|application/octet-stream}

  download-package:
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: ./mongo-efcore-provider/artifacts/nuget/${PACKAGE_ID}.${PACKAGE_VERSION}.nupkg
        remote_file: ${revision}/${PACKAGE_ID}.${PACKAGE_VERSION}.nupkg
        bucket: ${aws_upload_bucket}
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: ./mongo-efcore-provider/artifacts/nuget/${PACKAGE_ID}.${PACKAGE_VERSION}.snupkg
        remote_file: ${revision}/${PACKAGE_ID}.${PACKAGE_VERSION}.snupkg
        bucket: ${aws_upload_bucket}

  build-apidocs:
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongo-efcore-provider
        script: |
          ${PREPARE_SHELL}
          if ! [[ "$PACKAGE_VERSION" =~ ^[0-9]+\.[0-9]+\.0$ ]]; then
            echo "Skip api docs generating for the patch release"
            exit 0
          fi
          ./evergreen/build-apidocs.sh

  upload-apidocs:
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongo-efcore-provider
        env:
          GITHUB_USER: ${github_user}
          GITHUB_APIKEY: ${github_apikey}
        script: |
          ${PREPARE_SHELL}
          if ! [[ "$PACKAGE_VERSION" =~ ^[0-9]+\.[0-9]+\.0$ ]]; then
            echo "Skip api docs generating for the patch release"
            exit 0
          fi
          ./evergreen/upload-apidocs.sh

pre:
  - func: fetch-source
  - func: prepare-resources
  - func: windows-fix
  - func: fix-absolute-paths
  - func: make-files-executable
  - func: install-dependencies

post:
  - func: upload-test-results
  - func: upload-mo-artifacts
  - func: cleanup

tasks:
  - name: main-tests
    commands:
      - func: bootstrap-mongo-orchestration
      - func: run-tests

  - name: pack-packages
    commands:
      - func: pack-packages
      - func: upload-package
        vars:
          PACKAGE_ID: "MongoDB.EntityFrameworkCore"

  - name: packages-tests
    commands:
      - func: bootstrap-mongo-orchestration
      - func: download-package
        vars:
          PACKAGE_ID: "MongoDB.EntityFrameworkCore"
      - func: packages-smoke-tests

  - name: generate-apidocs
    commands:
      - func: build-apidocs
      - func: upload-apidocs

  - name: push-packages
    commands:
      - func: download-package
        vars:
          PACKAGE_ID: "MongoDB.EntityFrameworkCore"
      - func: push-packages
        vars:
          PACKAGES_SOURCE: "https://api.nuget.org/v3/index.json"
          PACKAGES_SOURCE_KEY: ${nuget_api_key}

axes:
  - id: version
    display_name: MongoDB Version
    values:
      - id: "latest"
        display_name: "latest"
        variables:
          VERSION: "latest"
      - id: "rapid"
        display_name: "rapid"
        variables:
          VERSION: "rapid"
      - id: "7.0"
        display_name: "7.0"
        variables:
          VERSION: "7.0"
      - id: "6.0"
        display_name: "6.0"
        variables:
          VERSION: "6.0"
      - id: "5.0"
        display_name: "5.0"
        variables:
          VERSION: "5.0"
      - id: "4.4"
        display_name: "4.4"
        variables:
          VERSION: "4.4"
      - id: "4.2"
        display_name: "4.2"
        variables:
          VERSION: "4.2"

  - id: os
    display_name: OS
    values:
      - id: "windows-64"
        display_name: "Windows 64-bit"
        variables:
          OS: "windows-64"
        run_on: windows-64-vs2017-test
      - id: "ubuntu-2004"
        display_name: "Ubuntu 20.04"
        variables:
          OS: "ubuntu-2004"
        run_on: ubuntu2004-small
      - id: "macos-1100"
        display_name: "macOS 11.00"
        variables:
          OS: "macos-1100"
        run_on: macos-1100

  - id: driver
    display_name: MongoDB.Driver Version
    values:
      - id: "2.25.0"
        display_name: "2.25.0"
        variables:
          DRIVER_VERSION: "2.25.0"
      - id: "latest"
        display_name: "Latest"
        variables:
          DRIVER_VERSION: "latest"

  - id: target_runtime
    display_name: Target .net runtime
    values:
      - id: "net80"
        display_name: "net 8.0"
        variables:
          TARGET_RUNTIME: "net80"

  - id: build-target
    display_name: CI build target
    values:
      - id: "tests"
        display_name: "tests"
        variables:
          BUILD_TARGET: "tests"
      - id: "release"
        display_name: "release"
        variables:
          BUILD_TARGET: "release"

buildvariants:
- matrix_name: main-tests
  matrix_spec:
    version: ["4.4", "5.0", "6.0", "7.0", "latest"]
    os: "*"
    driver: "*"
    target_runtime: "*"
    build-target: "tests"
  display_name: "${target_runtime} ${driver} Driver on ${os} with ${version} Server"
  tags: ["tests-variant"]
  expansions:
    BUILD_TARGET: "tests"
  tasks:
    - name: main-tests

- matrix_name: main-tests-ubuntu1804"
  matrix_spec:
    version: ["4.2"]
    driver: "*"
    target_runtime: "*"
    build-target: "tests"
  display_name: "${target_runtime} ${driver} Driver on Ubuntu-1804 with ${version} Server"
  run_on: ubuntu1804-small
  tags: ["tests-variant"]
  expansions:
    BUILD_TARGET: "tests"
  tasks:
    - name: main-tests

- matrix_name: pack-packages
  matrix_spec:
    build-target: "release"
  display_name: "Package Pack"
  run_on: ubuntu2004-small
  tags: ["pack-packages", "release_tag"]
  tasks:
    - name: pack-packages
      git_tag_only: true

- matrix_name: test-packages
  matrix_spec:
    version: "latest"
    os: "*"
    driver: "latest"
    target_runtime: "*"
    build-target: "release"
  display_name: "${target_runtime} smoke tests on ${os}"
  tags: ["package-tests", "release_tag"]
  tasks:
    - name: packages-tests
      git_tag_only: true
      depends_on:
        - name: pack-packages
          variant: .pack-packages

- matrix_name: generate-apidocs
  matrix_spec:
    build-target: "release"
  display_name: "Generate API Documentation"
  run_on: ubuntu2004-small
  tags: ["generate-apidocs", "release_tag"]
  tasks:
    - name: generate-apidocs
      git_tag_only: true
      depends_on:
        - name: packages-tests
          variant: .package-tests

- matrix_name: push-packages
  matrix_spec:
    build-target: "release"
  display_name: "Package Push"
  run_on: ubuntu2004-small
  tags: ["push-packages", "release_tag"]
  tasks:
    - name: push-packages
      git_tag_only: true
      depends_on:
        - name: pack-packages
          variant: .pack-packages
        - name: packages-tests
          variant: .package-tests
        - name: generate-apidocs
          variant: .generate-apidocs
