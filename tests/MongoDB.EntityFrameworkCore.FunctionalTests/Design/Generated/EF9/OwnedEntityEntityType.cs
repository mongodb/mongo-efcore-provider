// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using MongoDB.Bson;

#pragma warning disable 219, 612, 618
#nullable disable

namespace MongoDB.EntityFrameworkCore.FunctionalTests.Design
{
    [EntityFrameworkInternal]
    public partial class OwnedEntityEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "MongoDB.EntityFrameworkCore.FunctionalTests.Design.CompiledModelTests+OwnedEntity",
                typeof(CompiledModelTests.OwnedEntity),
                baseEntityType,
                propertyCount: 3,
                foreignKeyCount: 1,
                keyCount: 1);

            var everyTypeid = runtimeEntityType.AddProperty(
                "EveryTypeid",
                typeof(ObjectId),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: MongoDB.Bson.ObjectId.Parse("000000000000000000000000"));

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);

            var name = runtimeEntityType.AddProperty(
                "name",
                typeof(string),
                propertyInfo: typeof(CompiledModelTests.OwnedEntity).GetProperty("name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTests.OwnedEntity).GetField("<name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var key = runtimeEntityType.AddKey(
                new[] { everyTypeid, id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EveryTypeid") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true,
                ownership: true);

            var ownedEntities = principalEntityType.AddNavigation("ownedEntities",
                runtimeForeignKey,
                onDependent: false,
                typeof(List<CompiledModelTests.OwnedEntity>),
                propertyInfo: typeof(CompiledModelTests.EveryType).GetProperty("ownedEntities", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTests.EveryType).GetField("<ownedEntities>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                eagerLoaded: true);

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
