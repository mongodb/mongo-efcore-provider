// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using MongoDB.Bson;

#pragma warning disable 219, 612, 618
#nullable disable

namespace MongoDB.EntityFrameworkCore.FunctionalTests.Design
{
    [EntityFrameworkInternal]
    public partial class EveryTypeEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "MongoDB.EntityFrameworkCore.FunctionalTests.Design.CompiledModelTests+EveryType",
                typeof(CompiledModelTests.EveryType),
                baseEntityType,
                propertyCount: 19,
                navigationCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "id",
                typeof(ObjectId),
                propertyInfo: typeof(CompiledModelTests.EveryType).GetProperty("id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTests.EveryType).GetField("<id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: MongoDB.Bson.ObjectId.Parse("000000000000000000000000"));
            id.AddAnnotation("Mongo:ElementName", "_id");

            var aDateOnly = runtimeEntityType.AddProperty(
                "aDateOnly",
                typeof(DateOnly),
                propertyInfo: typeof(CompiledModelTests.EveryType).GetProperty("aDateOnly", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTests.EveryType).GetField("<aDateOnly>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateOnly(1, 1, 1));

            var aDateTime = runtimeEntityType.AddProperty(
                "aDateTime",
                typeof(DateTime),
                propertyInfo: typeof(CompiledModelTests.EveryType).GetProperty("aDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTests.EveryType).GetField("<aDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

            var aDecimal = runtimeEntityType.AddProperty(
                "aDecimal",
                typeof(decimal),
                propertyInfo: typeof(CompiledModelTests.EveryType).GetProperty("aDecimal", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTests.EveryType).GetField("<aDecimal>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);

            var aDecimal128 = runtimeEntityType.AddProperty(
                "aDecimal128",
                typeof(Decimal128),
                propertyInfo: typeof(CompiledModelTests.EveryType).GetProperty("aDecimal128", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTests.EveryType).GetField("<aDecimal128>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: MongoDB.Bson.Decimal128.Parse("0"));

            var aDouble = runtimeEntityType.AddProperty(
                "aDouble",
                typeof(double),
                propertyInfo: typeof(CompiledModelTests.EveryType).GetProperty("aDouble", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTests.EveryType).GetField("<aDouble>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0.0);

            var aFloat = runtimeEntityType.AddProperty(
                "aFloat",
                typeof(float),
                propertyInfo: typeof(CompiledModelTests.EveryType).GetProperty("aFloat", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTests.EveryType).GetField("<aFloat>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0f);

            var aGuid = runtimeEntityType.AddProperty(
                "aGuid",
                typeof(Guid),
                propertyInfo: typeof(CompiledModelTests.EveryType).GetProperty("aGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTests.EveryType).GetField("<aGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));

            var aLong = runtimeEntityType.AddProperty(
                "aLong",
                typeof(long),
                propertyInfo: typeof(CompiledModelTests.EveryType).GetProperty("aLong", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTests.EveryType).GetField("<aLong>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);

            var aLongRepresentedAsAInt = runtimeEntityType.AddProperty(
                "aLongRepresentedAsAInt",
                typeof(long),
                propertyInfo: typeof(CompiledModelTests.EveryType).GetProperty("aLongRepresentedAsAInt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTests.EveryType).GetField("<aLongRepresentedAsAInt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            aLongRepresentedAsAInt.AddAnnotation("Mongo:BsonRepresentation", new Dictionary<string, object> { ["BsonType"] = BsonType.Int32, ["AllowOverflow"] = true, ["AllowTruncation"] = true });

            var aShort = runtimeEntityType.AddProperty(
                "aShort",
                typeof(short),
                propertyInfo: typeof(CompiledModelTests.EveryType).GetProperty("aShort", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTests.EveryType).GetField("<aShort>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: (short)0);

            var aString = runtimeEntityType.AddProperty(
                "aString",
                typeof(string),
                propertyInfo: typeof(CompiledModelTests.EveryType).GetProperty("aString", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTests.EveryType).GetField("<aString>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var aStringArray = runtimeEntityType.AddProperty(
                "aStringArray",
                typeof(string[]),
                propertyInfo: typeof(CompiledModelTests.EveryType).GetProperty("aStringArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTests.EveryType).GetField("<aStringArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var aTimeOnly = runtimeEntityType.AddProperty(
                "aTimeOnly",
                typeof(TimeOnly),
                propertyInfo: typeof(CompiledModelTests.EveryType).GetProperty("aTimeOnly", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTests.EveryType).GetField("<aTimeOnly>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new TimeOnly(0, 0, 0));

            var aTimeSpan = runtimeEntityType.AddProperty(
                "aTimeSpan",
                typeof(TimeSpan),
                propertyInfo: typeof(CompiledModelTests.EveryType).GetProperty("aTimeSpan", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTests.EveryType).GetField("<aTimeSpan>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new TimeSpan(0, 0, 0, 0, 0));

            var anEnum = runtimeEntityType.AddProperty(
                "anEnum",
                typeof(CompiledModelTests.TestEnum),
                propertyInfo: typeof(CompiledModelTests.EveryType).GetProperty("anEnum", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTests.EveryType).GetField("<anEnum>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: CompiledModelTests.TestEnum.A);

            var anInt = runtimeEntityType.AddProperty(
                "anInt",
                typeof(int),
                propertyInfo: typeof(CompiledModelTests.EveryType).GetProperty("anInt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTests.EveryType).GetField("<anInt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);

            var anIntList = runtimeEntityType.AddProperty(
                "anIntList",
                typeof(List<int>),
                propertyInfo: typeof(CompiledModelTests.EveryType).GetProperty("anIntList", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTests.EveryType).GetField("<anIntList>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var anIntRepresentedAsAString = runtimeEntityType.AddProperty(
                "anIntRepresentedAsAString",
                typeof(int),
                propertyInfo: typeof(CompiledModelTests.EveryType).GetProperty("anIntRepresentedAsAString", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTests.EveryType).GetField("<anIntRepresentedAsAString>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            anIntRepresentedAsAString.AddAnnotation("Mongo:BsonRepresentation", new Dictionary<string, object> { ["BsonType"] = BsonType.String, ["AllowOverflow"] = false, ["AllowTruncation"] = false });

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Mongo:CollectionName", "EveryTypes");

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
